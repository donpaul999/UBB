     1                                  ;Given an array S of doublewords, build the array of bytes D formed from bytes of doublewords sorted as unsigned numbers in ascending order.
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 07563412153C2B1A            S DD 12345607h, 1A2B3C15h
    16                                      len equ $ - S
    17 00000008 00<rept>                    d times len DB 0
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 BE[00000000]                    mov ESI, S
    23 00000005 BF[08000000]                    mov EDI, d
    24 0000000A B908000000                      mov ECX, len
    25 0000000F FC                              cld
    26                                          repeat:
    27 00000010 AC                                  lodsb; AL <- [ESI]; ESI := ESI + 1
    28 00000011 AA                                  stosb; AL <- [EDI]; EDI := EDI + 1
    29 00000012 E2FC                                loop repeat
    30                                          
    31 00000014 66BA0100                        mov DX, 1 ; Bubble sort
    32                                          repeat1:
    33 00000018 6683FA00                            cmp DX, 0
    34 0000001C 7428                                je the_end
    35 0000001E 66BA0000                            mov DX, 0
    36 00000022 BE[08000000]                        mov ESI, d
    37 00000027 B908000000                          mov ECX, len
    38                                              repeat2:
    39 0000002C 8A06                                    mov AL, [ESI]
    40 0000002E 3A4601                                  cmp AL, [ESI + 1]
    41 00000031 7E0E                                    jle next
    42 00000033 8A6601                                  mov AH, [ESI + 1]
    43 00000036 8A3E                                    mov BH, [ESI]
    44 00000038 887E01                                  mov [ESI + 1], BH
    45 0000003B 8826                                    mov [ESI], AH
    46 0000003D 66BA0100                                mov DX, 1
    47                                              next:
    48 00000041 46                                      inc ESI
    49 00000042 E2E8                                    loop repeat2
    50 00000044 EBD2                                    jmp repeat1             ;d DB 07h, 12h, 15h, 1Ah, 2Bh, 34h, 3Ch, 56h    
    51                                          the_end:
    52                                          ; exit(0)
    53 00000046 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000048 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
