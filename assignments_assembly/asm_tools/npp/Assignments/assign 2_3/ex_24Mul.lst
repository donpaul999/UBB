     1                                  	bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  	; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  	global start        
     5                                  
     6                                  	; declare external functions needed by our program
     7                                  	extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  	import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  							  ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  	; our data is declared here (the variables needed by our program)
    12                                  	segment data use32 class=data
    13                                  		; ...
    14 00000000 06000000                		a DD 6
    15 00000004 05                      		b DB 5
    16 00000005 0F                      		c DB 15
    17 00000006 05                      		d DB 5
    18 00000007 2900000000000000        		x DQ 41
    19                                  		
    20                                  	; our code starts here
    21                                  	segment code use32 class=code
    22                                  		start:
    23                                  			; ...
    24 00000000 A0[04000000]            			mov AL, [b] ;AL := b
    25 00000005 F6E0                    			mul AL	; AX := AL*AL = b * b
    26 00000007 6689C3                  			mov BX, AX ; BX := AX = b * b
    27                                  			
    28 0000000A A0[05000000]            			mov AL, [c]	; AL := c
    29 0000000F B400                    			mov AH, 0	; AX := c
    30 00000011 F635[06000000]          			div byte [d]	;AL := c/d, AH := c % d
    31                                  
    32 00000017 B400                    			mov AH, 0	; AX := AL = c/d
    33 00000019 6629C3                  			sub BX, AX 	; BX := BX - AX = b * b - c / d
    34 0000001C 6683C302                			add BX, 2	; BX := BX + 2 = b * b - c / d + 2
    35                                  		
    36 00000020 A1[07000000]            			mov EAX, dword [x]	
    37 00000025 8B15[0B000000]          			mov EDX, dword [x + 4]	; EDX:EAX := x
    38                                  			
    39 0000002B 83C007                  			add EAX, 7
    40 0000002E 83D200                  			adc EDX, 0	; EDX:EAX := x + 7
    41                                  			
    42 00000031 6A00                                push 0
    43 00000033 6653                    			push BX
    44 00000035 59                      			pop ECX	;ECX := CX= b*b -c/d+2
    45                                  			
    46 00000036 F7F1                    			div ECX ; EDX := EDX % ECX, EAX := EAX/ ECX
    47                                  			
    48 00000038 8B1D[00000000]          			mov EBX, [a]	;EBX := a
    49 0000003E 29C3                    			sub EBX, EAX	;EBX := EBX - EAX
    50                                                              ;EBX := 4
    51                                  			
    52                                  			
    53                                  			; exit(0)
    54 00000040 6A00                    			push    dword 0      ; push the parameter for exit onto the stack
    55 00000042 FF15[00000000]          			call    [exit]       ; call exit to terminate the program
