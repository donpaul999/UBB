     1                                  ;Given an array A of words, build two arrays of bytes:  
     2                                  ;- array B1 contains as elements the higher part of the words from A
     3                                  ;- array B2 contains as elements the lower part of the words from A
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 4523A50068039039            A DW 2345h, 0A5h, 368h, 3990h
    18                                      len equ ($-A)/2
    19 00000008 00<rept>                    B1 times len DB 0
    20 0000000C 00<rept>                    B2 times len DB 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                          ;lower parts
    27 00000000 BE[00000000]                    mov ESI, A
    28 00000005 BF[0C000000]                    mov EDI, B2
    29 0000000A B904000000                      mov ECX, len
    30 0000000F FC                              cld
    31                                          repeat:
    32 00000010 66AD                                lodsw ;AX <- [ESI], ESI += 2
    33 00000012 AA                                  stosb
    34 00000013 E2FB                                loop repeat
    35                                          ;higher parts
    36 00000015 BE[00000000]                    mov ESI, A
    37 0000001A B904000000                      mov ECX, len
    38 0000001F BF[08000000]                    mov EDI, B1
    39                                          repeat1:
    40 00000024 66AD                                lodsw; AX <- [ESI], ESI += 2, high byte in AH
    41 00000026 88E0                                mov AL, AH
    42 00000028 AA                                  stosb; AL ->[EDI], EDI++
    43 00000029 E2F9                                loop repeat1
    44                                          
    45                                          
    46                                          ; exit(0)
    47 0000002B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 0000002D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
